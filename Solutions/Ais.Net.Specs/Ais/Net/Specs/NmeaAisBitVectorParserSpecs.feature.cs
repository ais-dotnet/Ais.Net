// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Ais.Net.Specs
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("NmeaAisBitVectorParserSpecs")]
    public partial class NmeaAisBitVectorParserSpecsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "NmeaAisBitVectorParserSpecs.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NmeaAisBitVectorParserSpecs", "    In order to process the AIS data in the payload of an NMEA message\r\n    As a " +
                    "developer writing parsers to process specific AIS messages\r\n    I want to be abl" +
                    "e to extract arbitrary bit ranges from data encoded with the \'AIVDM/AIVDO Payloa" +
                    "d Armoring\'", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unsigned aligned 6-bit integer")]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000000", "0", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("13nW5<00000IoPlSbE`:P8EH0534", "0", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("2000000000000000000000000000", "0", "0", "2", null)]
        [NUnit.Framework.TestCaseAttribute("24c`1`001kPEGSLR98IP00462D0s", "0", "0", "2", null)]
        [NUnit.Framework.TestCaseAttribute("3000000000000000000000000000", "0", "0", "3", null)]
        [NUnit.Framework.TestCaseAttribute("33n24L00000p3bHUiw<v46`60?Kk", "0", "0", "3", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000", "0", "0", "5", null)]
        [NUnit.Framework.TestCaseAttribute("53m89J81SR44hdhL0004eH5A84q<00000000001@4P8825LD08j0DTm0A000", "0", "0", "5", null)]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000000000", "0", "0", "18", null)]
        [NUnit.Framework.TestCaseAttribute("B3q35T005h<0h@`Dd:i;gwRUoP06", "0", "0", "18", null)]
        [NUnit.Framework.TestCaseAttribute("H00000000000000000000000000", "2", "0", "24", null)]
        [NUnit.Framework.TestCaseAttribute("H3mhO30PDT@V04pU@4000000000", "2", "0", "24", null)]
        [NUnit.Framework.TestCaseAttribute("40000000000M0000000000000000", "0", "66", "29", null)]
        [NUnit.Framework.TestCaseAttribute("400000000000c000000000000000", "0", "72", "43", null)]
        [NUnit.Framework.TestCaseAttribute("40000000000O0000000000000000", "0", "66", "31", null)]
        [NUnit.Framework.TestCaseAttribute("400000000000T000000000000000", "0", "72", "36", null)]
        [NUnit.Framework.TestCaseAttribute("ABC0", "0", "18", "0", null)]
        [NUnit.Framework.TestCaseAttribute("ABC1", "0", "18", "1", null)]
        [NUnit.Framework.TestCaseAttribute("ABC:", "0", "18", "10", null)]
        [NUnit.Framework.TestCaseAttribute("ABCA", "0", "18", "17", null)]
        [NUnit.Framework.TestCaseAttribute("ABC`", "0", "18", "40", null)]
        [NUnit.Framework.TestCaseAttribute("ABCa", "0", "18", "41", null)]
        [NUnit.Framework.TestCaseAttribute("ABCw", "0", "18", "63", null)]
        public virtual void UnsignedAligned6_BitInteger(string payload, string padding, string offset, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unsigned aligned 6-bit integer", null, exampleTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 16
    testRunner.Given(string.Format("an NMEA AIS payload of \'{0}\' and padding {1}", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
    testRunner.When(string.Format("I read an unsigned 6 bit int at offset {0}", offset), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
    testRunner.Then(string.Format("the NmeaAisBitVectorParser returns an unsigned integer with value {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Unsigned misaligned 6-bit integer")]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000020000", "0", "137", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000040000", "0", "137", "2", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000060000", "0", "137", "3", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000100000", "0", "137", "32", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000120000", "0", "137", "33", null)]
        [NUnit.Framework.TestCaseAttribute("10000000000000000000001d0000", "0", "137", "54", null)]
        [NUnit.Framework.TestCaseAttribute("10000000000000000000001f0000", "0", "137", "55", null)]
        [NUnit.Framework.TestCaseAttribute("13nW5<00000IoPlSbE`:P8EH0534", "0", "137", "44", null)]
        [NUnit.Framework.TestCaseAttribute("13oO7800000FH>>S6rpur`P200S<", "0", "137", "1", null)]
        [NUnit.Framework.TestCaseAttribute("00000000000000000000000000000000000000000000000", "2", "82", "0", null)]
        [NUnit.Framework.TestCaseAttribute("00000000000000400000000000000000000000000000000", "2", "82", "1", null)]
        [NUnit.Framework.TestCaseAttribute("00000000000000800000000000000000000000000000000", "2", "82", "2", null)]
        [NUnit.Framework.TestCaseAttribute("00000000000001000000000000000000000000000000000", "2", "82", "16", null)]
        [NUnit.Framework.TestCaseAttribute("00000000000001400000000000000000000000000000000", "2", "82", "17", null)]
        [NUnit.Framework.TestCaseAttribute("00000000000002000000000000000000000000000000000", "2", "82", "32", null)]
        [NUnit.Framework.TestCaseAttribute("00000000000002H00000000000000000000000000000000", "2", "82", "38", null)]
        [NUnit.Framework.TestCaseAttribute("00000000000003t00000000000000000000000000000000", "2", "82", "63", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "1", "27", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "2", "55", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "3", "46", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "4", "29", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "5", "59", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "7", "47", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "8", "30", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "9", "61", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "10", "59", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "11", "55", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "13", "31", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "14", "62", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "15", "61", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "16", "59", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "17", "55", null)]
        public virtual void UnsignedMisaligned6_BitInteger(string payload, string padding, string offset, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unsigned misaligned 6-bit integer", null, exampleTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 53
    testRunner.Given(string.Format("an NMEA AIS payload of \'{0}\' and padding {1}", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 54
    testRunner.When(string.Format("I read an unsigned 6 bit int at offset {0}", offset), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 55
    testRunner.Then(string.Format("the NmeaAisBitVectorParser returns an unsigned integer with value {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Signed 8-bit integer")]
        [NUnit.Framework.TestCaseAttribute("0000000000000000000000000000", "0", "42", "0", null)]
        [NUnit.Framework.TestCaseAttribute("00000000@0000000000000000000", "0", "42", "1", null)]
        [NUnit.Framework.TestCaseAttribute("00000000h0000000000000000000", "0", "42", "3", null)]
        [NUnit.Framework.TestCaseAttribute("0000000100000000000000000000", "0", "42", "4", null)]
        [NUnit.Framework.TestCaseAttribute("00000001@0000000000000000000", "0", "42", "5", null)]
        [NUnit.Framework.TestCaseAttribute("0000000Oh0000000000000000000", "0", "42", "127", null)]
        [NUnit.Framework.TestCaseAttribute("0000000P00000000000000000000", "0", "42", "-128", null)]
        [NUnit.Framework.TestCaseAttribute("13oO7800000FH>>S6rpur`P200S<", "0", "42", "0", null)]
        [NUnit.Framework.TestCaseAttribute("13oHtV7OhN0=B9bQch;WqnCp0W3h", "0", "42", "127", null)]
        [NUnit.Framework.TestCaseAttribute("13mCIp0P00PFnJBSHS1>4?wH2@JB", "0", "42", "-128", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "0", "-73", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "1", "110", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "2", "-35", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "3", "-69", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "4", "119", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "5", "-17", null)]
        [NUnit.Framework.TestCaseAttribute("eogf", "1", "6", "-34", null)]
        public virtual void Signed8_BitInteger(string payload, string padding, string offset, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Signed 8-bit integer", null, exampleTags);
#line 115
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 116
    testRunner.Given(string.Format("an NMEA AIS payload of \'{0}\' and padding {1}", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 117
    testRunner.When(string.Format("I read a signed 8 bit int at offset {0}", offset), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 118
    testRunner.Then(string.Format("the NmeaAisBitVectorParser returns an signed integer with value {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Single bit")]
        [NUnit.Framework.TestCaseAttribute("0000", "0", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1000", "0", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1000", "0", "1", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1000", "0", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1000", "0", "3", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1000", "0", "4", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1000", "0", "5", "1", null)]
        [NUnit.Framework.TestCaseAttribute("2000", "0", "3", "0", null)]
        [NUnit.Framework.TestCaseAttribute("2000", "0", "4", "1", null)]
        [NUnit.Framework.TestCaseAttribute("2000", "0", "5", "0", null)]
        [NUnit.Framework.TestCaseAttribute("0000000000P", "0", "59", "0", null)]
        [NUnit.Framework.TestCaseAttribute("0000000000P", "0", "60", "1", null)]
        [NUnit.Framework.TestCaseAttribute("0000000000P", "0", "61", "0", null)]
        [NUnit.Framework.TestCaseAttribute("0000000000000000000000000000", "0", "60", "0", null)]
        [NUnit.Framework.TestCaseAttribute("0000000000P00000000000000000", "0", "60", "1", null)]
        [NUnit.Framework.TestCaseAttribute("13mCIp0P00PFnJBSHS1>4?wH2@JB", "0", "60", "1", null)]
        [NUnit.Framework.TestCaseAttribute("13nW5<00000IoPlSbE`:P8EH0534", "0", "60", "0", null)]
        public virtual void SingleBit(string payload, string padding, string offset, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Single bit", null, exampleTags);
#line 153
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 154
    testRunner.Given(string.Format("an NMEA AIS payload of \'{0}\' and padding {1}", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 155
    testRunner.When(string.Format("I read an unsigned 1 bit int at offset {0}", offset), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 156
    testRunner.Then(string.Format("the NmeaAisBitVectorParser returns an unsigned integer with value {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
