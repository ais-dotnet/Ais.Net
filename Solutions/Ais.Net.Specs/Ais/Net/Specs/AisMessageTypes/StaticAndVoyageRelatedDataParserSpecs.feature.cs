// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Ais.Net.Specs.AisMessageTypes
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("StaticAndVoyageRelatedDataParserSpecs")]
    public partial class StaticAndVoyageRelatedDataParserSpecsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "StaticAndVoyageRelatedDataParserSpecs.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Ais/Net/Specs/AisMessageTypes", "StaticAndVoyageRelatedDataParserSpecs", "    In order process AIS messages from an nm4 file\r\n    As a developer\r\n    I wan" +
                    "t the NmeaAisStaticAndVoyageRelatedDataParser to be able to parse the payload se" +
                    "ction of message type 5: Static and Voyage Related Data", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Message Type")]
        public virtual void MessageType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Message Type", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 17
    testRunner.When("I parse \'53m89J81SR44hdhL0004eH5A84q<00000000001@4P8825LD08j0DTm0A00000000000000\'" +
                        " with padding 2 as Static and Voyage Related Data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
    testRunner.Then("NmeaAisStaticAndVoyageRelatedDataParser.Type is 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Repeat Indicator")]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000000", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("5@000000000000000000000000000000000000000000000000000000000000000000000", "2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("5P000000000000000000000000000000000000000000000000000000000000000000000", "2", "2", null)]
        [NUnit.Framework.TestCaseAttribute("5h000000000000000000000000000000000000000000000000000000000000000000000", "2", "3", null)]
        [NUnit.Framework.TestCaseAttribute("53m89J81SR44hdhL0004eH5A84q<00000000001@4P8825LD08j0DTm0A00000000000000", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("5C@oTQT2Ad5duL9W:21=@EHq>085A@hE:222220l00P745m>0>S3kQiF@DPVAC`88888880", "2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("5SmkPJ02AmrLh=PV2208t60t@Tr222222222220l2@B785j:0BU4SkQ21BCH88888888880", "2", "2", null)]
        public virtual void RepeatIndicator(string payload, string padding, string repeatCount, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("repeatCount", repeatCount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Repeat Indicator", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 21
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as Static and Voyage Related Data", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 22
    testRunner.Then(string.Format("NmeaAisStaticAndVoyageRelatedDataParser.RepeatIndicator is {0}", repeatCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("MMSI")]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000000", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("500000@0000000000000000000000000000000000000000000000000000000000000000", "2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("500000P0000000000000000000000000000000000000000000000000000000000000000", "2", "2", null)]
        [NUnit.Framework.TestCaseAttribute("5>eq`d@0000000000000000000000000000000000000000000000000000000000000000", "2", "987654321", null)]
        [NUnit.Framework.TestCaseAttribute("53m89J81SR44hdhL0004eH5A84q<00000000001@4P8825LD08j0DTm0A00000000000000", "2", "257034600", null)]
        [NUnit.Framework.TestCaseAttribute("5C@oTQT2Ad5duL9W:21=@EHq>085A@hE:222220l00P745m>0>S3kQiF@DPVAC`88888880", "2", "219014278", null)]
        [NUnit.Framework.TestCaseAttribute("5SmkPJ02AmrLh=PV2208t60t@Tr222222222220l2@B785j:0BU4SkQ21BCH88888888880", "2", "257745000", null)]
        public virtual void MMSI(string payload, string padding, string mmsi, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("mmsi", mmsi);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("MMSI", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as Static and Voyage Related Data", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
    testRunner.Then(string.Format("NmeaAisStaticAndVoyageRelatedDataParser.Mmsi is {0}", mmsi), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AIS Version")]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000000", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("50000040000000000000000000000000000000000000000000000000000000000000000", "2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("50000080000000000000000000000000000000000000000000000000000000000000000", "2", "2", null)]
        [NUnit.Framework.TestCaseAttribute("500000<0000000000000000000000000000000000000000000000000000000000000000", "2", "3", null)]
        [NUnit.Framework.TestCaseAttribute("5SmkPJ02AmrLh=PV2208t60t@Tr222222222220l2@B785j:0BU4SkQ21BCH88888888880", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("5C@oTQT2Ad5duL9W:21=@EHq>085A@hE:222220l00P745m>0>S3kQiF@DPVAC`88888880", "2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("53m89J81SR44hdhL0004eH5A84q<00000000001@4P8825LD08j0DTm0A00000000000000", "2", "2", null)]
        public virtual void AISVersion(string payload, string padding, string aisVersion, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("aisVersion", aisVersion);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AIS Version", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 49
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as Static and Voyage Related Data", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
    testRunner.Then(string.Format("NmeaAisStaticAndVoyageRelatedDataParser.AisVersion is {0}", aisVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("IMO Number")]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000000", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000500000000000000000000000000000000000000000000000000000000000", "2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("5000003cNJ;500000000000000000000000000000000000000000000000000000000000", "2", "987654321", null)]
        [NUnit.Framework.TestCaseAttribute("53m6;7`00000hEAP000488D0000000000000000l0h<335m907RCQ4QH22PDU23k3@00000", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("53m89J81SR44hdhL0004eH5A84q<00000000001@4P8825LD08j0DTm0A00000000000000", "2", "6522945", null)]
        public virtual void IMONumber(string payload, string padding, string imoNumber, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("imoNumber", imoNumber);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("IMO Number", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 63
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as Static and Voyage Related Data", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 64
    testRunner.Then(string.Format("NmeaAisStaticAndVoyageRelatedDataParser.ImoNumber is {0}", imoNumber), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Call Sign")]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000000", "2", "@@@@@@@", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000100000000000000000000000000000000000000000000000000000000000", "2", "P@@@@@@", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000300000000000000000000000000000000000000000000000000000000000", "2", "0@@@@@@", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000040000000000000000000000000000000000000000000000000000", "2", "@@@@@@A", null)]
        [NUnit.Framework.TestCaseAttribute("5C@oTQT2Ad5duL9W:21=@EHq>085A@hE:222220l00P745m>0>S3kQiF@DPVAC`88888880", "2", "OWBY2", null)]
        [NUnit.Framework.TestCaseAttribute("53JIbD42BlHOTP7;WSIHth622222222222222216D@L;B5n8NITSm51DQ0CH88888888880", "2", "9HA2986", null)]
        [NUnit.Framework.TestCaseAttribute("53m89J81SR44hdhL0004eH5A84q<00000000001@4P8825LD08j0DTm0A00000000000000", "2", "LKLG@@@", null)]
        [NUnit.Framework.TestCaseAttribute("53mr4E42EBp00000001HU<Ttr0tJ1@PF0H`u8A<t00b5:40Ht3h00000000000000000000", "2", "@@@@@@@", null)]
        public virtual void CallSign(string payload, string padding, string callSign, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("callSign", callSign);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Call Sign", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 75
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as Static and Voyage Related Data", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 76
    testRunner.Then(string.Format("NmeaAisStaticAndVoyageRelatedDataParser.CallSign is {0}", callSign), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Vessel Name")]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000000", "2", "@@@@@@@@@@@@@@@@@@@@", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000010000000000000000000000000000000000000000000000000000", "2", "P@@@@@@@@@@@@@@@@@@@", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000030000000000000000000000000000000000000000000000000000", "2", "0@@@@@@@@@@@@@@@@@@@", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000400000000000000000000000000000000", "2", "@@@@@@@@@@@@@@@@@@@A", null)]
        [NUnit.Framework.TestCaseAttribute("5C@oTQT2Ad5duL9W:21=@EHq>085A@hE:222220l00P745m>0>S3kQiF@DPVAC`88888880", "2", "STEVNS BATTLER", null)]
        [NUnit.Framework.TestCaseAttribute("5SmkPJ02AmrLh=PV2208t60t@Tr222222222220l2@B785j:0BU4SkQ21BCH88888888880", "2", "BOA ODIN", null)]
        [NUnit.Framework.TestCaseAttribute("53m89J81SR44hdhL0004eH5A84q<00000000001@4P8825LD08j0DTm0A00000000000000", "2", "AKVATRANS@@@@@@@@@@@", null)]
        [NUnit.Framework.TestCaseAttribute("53mr4E42EBp00000001HU<Ttr0tJ1@PF0H`u8A<t00b5:40Ht3h00000000000000000000", "2", "VISION OF THE FJORDS", null)]
        public virtual void VesselName(string payload, string padding, string vesselName, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("vesselName", vesselName);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Vessel Name", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 90
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as Static and Voyage Related Data", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 91
    testRunner.Then(string.Format("NmeaAisStaticAndVoyageRelatedDataParser.VesselName is {0}", vesselName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Ship Type")]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000000", "2", "NotAvailable", null)]
        [NUnit.Framework.TestCaseAttribute("500000000000000000000000000000000000000E0000000000000000000000000000000", "2", "WingInGroundHazardousCategoryA", null)]
        [NUnit.Framework.TestCaseAttribute("53mg2o400000hOSGOJ18E=@hE=>0<P4hhDpLE:0Q0H<6640008hj<M`1Sl`2CQSp8888880", "2", "DredgingOrUnderwaterOps", null)]
        [NUnit.Framework.TestCaseAttribute("53mFoV000000hf3C3S08`u8pH`Dhh0000000000m1@6334rdR0888888888888888888880", "2", "PortTender", null)]
        [NUnit.Framework.TestCaseAttribute("53JIbD42BlHOTP7;WSIHth622222222222222216D@L;B5n8NITSm51DQ0CH88888888880", "2", "CargoAll", null)]
        [NUnit.Framework.TestCaseAttribute("548dvb02<<pTiT8l0008DhLT61<D5L5U<00000183jJC65mE0?DiAkm0000000000000000", "2", "CargoHazardousCategoryB", null)]
        [NUnit.Framework.TestCaseAttribute("53m7TH800000hS;3?P0Hu<p604ltp0000000001?0P;5340Ht5531Wu=N=eN=u000000000", "2", "CargoNoAdditionalInformation", null)]
        [NUnit.Framework.TestCaseAttribute("53QI:t02=oDi`@Q3B20dEV0l58Tr22222222221@8PD765lcN>4SkSRCQiC`88888888880", "2", "TankerAll", null)]
        public virtual void ShipType(string payload, string padding, string type, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("type", type);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ship Type", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 104
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 105
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as Static and Voyage Related Data", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 106
    testRunner.Then(string.Format("NmeaAisStaticAndVoyageRelatedDataParser.ShipType is {0}", type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dimension to Bow")]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000000", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000800000000000000000000000000000", "2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("5000000000000000000000000000000000000000wp00000000000000000000000000000", "2", "511", null)]
        [NUnit.Framework.TestCaseAttribute("5C@oTQT2Ad5duL9W:21=@EHq>085A@hE:222220l00P745m>0>S3kQiF@DPVAC`88888880", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("53m6;7`00000hEAP000488D0000000000000000l0h<335m907RCQ4QH22PDU23k3@00000", "2", "6", null)]
        [NUnit.Framework.TestCaseAttribute("53JIbD42BlHOTP7;WSIHth622222222222222216D@L;B5n8NITSm51DQ0CH88888888880", "2", "162", null)]
        public virtual void DimensionToBow(string payload, string padding, string size, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("size", size);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dimension to Bow", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 119
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 120
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as Static and Voyage Related Data", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 121
    testRunner.Then(string.Format("NmeaAisStaticAndVoyageRelatedDataParser.DimensionToBow is {0}", size), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dimension to Stern")]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000000", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000010000000000000000000000000000", "2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("500000000000000000000000000000000000000007w0000000000000000000000000000", "2", "511", null)]
        [NUnit.Framework.TestCaseAttribute("53mFoV000000hf3C3S08`u8pH`Dhh0000000000m1@6334rdR0888888888888888888880", "2", "6", null)]
        [NUnit.Framework.TestCaseAttribute("548dvb02<<pTiT8l0008DhLT61<D5L5U<00000183jJC65mE0?DiAkm0000000000000000", "2", "154", null)]
        public virtual void DimensionToStern(string payload, string padding, string size, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("size", size);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dimension to Stern", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 132
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 133
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as Static and Voyage Related Data", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 134
    testRunner.Then(string.Format("NmeaAisStaticAndVoyageRelatedDataParser.DimensionToStern is {0}", size), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dimension to Port")]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000000", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000001000000000000000000000000000", "2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("5000000000000000000000000000000000000000000w000000000000000000000000000", "2", "63", null)]
        [NUnit.Framework.TestCaseAttribute("53mFoV000000hf3C3S08`u8pH`Dhh0000000000m1@6334rdR0888888888888888888880", "2", "3", null)]
        [NUnit.Framework.TestCaseAttribute("548dvb02<<pTiT8l0008DhLT61<D5L5U<00000183jJC65mE0?DiAkm0000000000000000", "2", "19", null)]
        public virtual void DimensionToPort(string payload, string padding, string size, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("size", size);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dimension to Port", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 144
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 145
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as Static and Voyage Related Data", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 146
    testRunner.Then(string.Format("NmeaAisStaticAndVoyageRelatedDataParser.DimensionToPort is {0}", size), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dimension to Starboard")]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000000", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000100000000000000000000000000", "2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000w00000000000000000000000000", "2", "63", null)]
        [NUnit.Framework.TestCaseAttribute("53m89J81SR44hdhL0004eH5A84q<00000000001@4P8825LD08j0DTm0A00000000000000", "2", "2", null)]
        [NUnit.Framework.TestCaseAttribute("53JIbD42BlHOTP7;WSIHth622222222222222216D@L;B5n8NITSm51DQ0CH88888888880", "2", "18", null)]
        public virtual void DimensionToStarboard(string payload, string padding, string size, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("size", size);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dimension to Starboard", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 156
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 157
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as Static and Voyage Related Data", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 158
    testRunner.Then(string.Format("NmeaAisStaticAndVoyageRelatedDataParser.DimensionToStarboard is {0}", size), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Position fix type")]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000000", "0", "Undefined", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000040000000000000000000000000", "0", "Gps", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000080000000000000000000000000", "0", "Glonass", null)]
        [NUnit.Framework.TestCaseAttribute("500000000000000000000000000000000000000000000<0000000000000000000000000", "0", "CombinedGpsGlonass", null)]
        [NUnit.Framework.TestCaseAttribute("500000000000000000000000000000000000000000000@0000000000000000000000000", "0", "LoranC", null)]
        [NUnit.Framework.TestCaseAttribute("500000000000000000000000000000000000000000000D0000000000000000000000000", "0", "Chayka", null)]
        [NUnit.Framework.TestCaseAttribute("500000000000000000000000000000000000000000000H0000000000000000000000000", "0", "IntegratedNavigationSystem", null)]
        [NUnit.Framework.TestCaseAttribute("500000000000000000000000000000000000000000000L0000000000000000000000000", "0", "Surveyed", null)]
        [NUnit.Framework.TestCaseAttribute("500000000000000000000000000000000000000000000P0000000000000000000000000", "0", "Galileo", null)]
        [NUnit.Framework.TestCaseAttribute("53m8:d`2F;v4hHQR220PE8l4pr0a:2222222221J0`?6600Ht8kCR81RDj1PDSDp8888880", "0", "Undefined", null)]
        [NUnit.Framework.TestCaseAttribute("53m89J81SR44hdhL0004eH5A84q<00000000001@4P8825LD08j0DTm0A00000000000000", "0", "Gps", null)]
        [NUnit.Framework.TestCaseAttribute("544MR0827oeaD<u0000lDdP4pTf0duAA<uH000167pF=2=nG0:0DRj0CQiC4jh000000000", "0", "CombinedGpsGlonass", null)]
        [NUnit.Framework.TestCaseAttribute("53mE09400000hoC3301<4pAV222222200000000N0h:23t0Ht6CP@000000000000000000", "0", "15", null)]
        public virtual void PositionFixType(string payload, string padding, string epfd, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("epfd", epfd);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Position fix type", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 168
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 169
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as Static and Voyage Related Data", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 170
    testRunner.Then(string.Format("NmeaAisStaticAndVoyageRelatedDataParser.PositionFixType is {0}", epfd), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ETA Month")]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000000", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("5000000000000000000000000000000000000000000000@000000000000000000000000", "2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("5000000000000000000000000000000000000000000000P000000000000000000000000", "2", "2", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000010000000000000000000000000", "2", "4", null)]
        [NUnit.Framework.TestCaseAttribute("5000000000000000000000000000000000000000000001@000000000000000000000000", "2", "5", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000020000000000000000000000000", "2", "8", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000030000000000000000000000000", "2", "12", null)]
        [NUnit.Framework.TestCaseAttribute("53mr4E42EBp00000001HU<Ttr0tJ1@PF0H`u8A<t00b5:40Ht3h00000000000000000000", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("53m89J81SR44hdhL0004eH5A84q<00000000001@4P8825LD08j0DTm0A00000000000000", "2", "5", null)]
        [NUnit.Framework.TestCaseAttribute("544MR0827oeaD<u0000lDdP4pTf0duAA<uH000167pF=2=nG0:0DRj0CQiC4jh000000000", "2", "7", null)]
        public virtual void ETAMonth(string payload, string padding, string month, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("month", month);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ETA Month", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 188
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 189
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as Static and Voyage Related Data", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 190
    testRunner.Then(string.Format("NmeaAisStaticAndVoyageRelatedDataParser.EtaMonth is {0}", month), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ETA Day")]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000000", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000P00000000000000000000000", "2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000001000000000000000000000000", "2", "2", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000001P00000000000000000000000", "2", "3", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000002000000000000000000000000", "2", "4", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000004000000000000000000000000", "2", "8", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000008000000000000000000000000", "2", "16", null)]
        [NUnit.Framework.TestCaseAttribute("5000000000000000000000000000000000000000000000?000000000000000000000000", "2", "30", null)]
        [NUnit.Framework.TestCaseAttribute("5000000000000000000000000000000000000000000000?P00000000000000000000000", "2", "31", null)]
        [NUnit.Framework.TestCaseAttribute("53mr4E42EBp00000001HU<Ttr0tJ1@PF0H`u8A<t00b5:40Ht3h00000000000000000000", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("53QI:t02=oDi`@Q3B20dEV0l58Tr22222222221@8PD765lcN>4SkSRCQiC`88888888880", "2", "9", null)]
        [NUnit.Framework.TestCaseAttribute("55AQcl42D>PTQ3G7C63NmL5HE>2222222222221J28B545en08im@DQ2CQp43k0D`1CD4cP", "2", "27", null)]
        public virtual void ETADay(string payload, string padding, string day, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("day", day);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ETA Day", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 205
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 206
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as Static and Voyage Related Data", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 207
    testRunner.Then(string.Format("NmeaAisStaticAndVoyageRelatedDataParser.EtaDay is {0}", day), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ETA Hour")]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000000", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000100000000000000000000000", "2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000200000000000000000000000", "2", "2", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000@00000000000000000000000", "2", "16", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000G00000000000000000000000", "2", "23", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000H00000000000000000000000", "2", "24", null)]
        [NUnit.Framework.TestCaseAttribute("53mg2o400000hOSGOJ18E=@hE=>0<P4hhDpLE:0Q0H<6640008hj<M`1Sl`2CQSp8888880", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("53JIbD42BlHOTP7;WSIHth622222222222222216D@L;B5n8NITSm51DQ0CH88888888880", "2", "8", null)]
        [NUnit.Framework.TestCaseAttribute("53mFoV000000hf3C3S08`u8pH`Dhh0000000000m1@6334rdR0888888888888888888880", "2", "12", null)]
        [NUnit.Framework.TestCaseAttribute("544MR0827oeaD<u0000lDdP4pTf0duAA<uH000167pF=2=nG0:0DRj0CQiC4jh000000000", "2", "23", null)]
        [NUnit.Framework.TestCaseAttribute("53mr4E42EBp00000001HU<Ttr0tJ1@PF0H`u8A<t00b5:40Ht3h00000000000000000000", "2", "24", null)]
        public virtual void ETAHour(string payload, string padding, string hour, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("hour", hour);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ETA Hour", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 224
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 225
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as Static and Voyage Related Data", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 226
    testRunner.Then(string.Format("NmeaAisStaticAndVoyageRelatedDataParser.EtaHour is {0}", hour), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("ETA Minute")]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000000", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000010000000000000000000000", "2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("500000000000000000000000000000000000000000000000:0000000000000000000000", "2", "10", null)]
        [NUnit.Framework.TestCaseAttribute("500000000000000000000000000000000000000000000000s0000000000000000000000", "2", "59", null)]
        [NUnit.Framework.TestCaseAttribute("500000000000000000000000000000000000000000000000t0000000000000000000000", "2", "60", null)]
        [NUnit.Framework.TestCaseAttribute("53m89J81SR44hdhL0004eH5A84q<00000000001@4P8825LD08j0DTm0A00000000000000", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("53mFoV000000hf3C3S08`u8pH`Dhh0000000000m1@6334rdR0888888888888888888880", "2", "34", null)]
        [NUnit.Framework.TestCaseAttribute("53mr4E42EBp00000001HU<Ttr0tJ1@PF0H`u8A<t00b5:40Ht3h00000000000000000000", "2", "60", null)]
        public virtual void ETAMinute(string payload, string padding, string minute, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("minute", minute);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("ETA Minute", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 242
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 243
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as Static and Voyage Related Data", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 244
    testRunner.Then(string.Format("NmeaAisStaticAndVoyageRelatedDataParser.EtaMinute is {0}", minute), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Draught")]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000000", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000@00000000000000000000", "2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000P00000000000000000000", "2", "2", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000h00000000000000000000", "2", "3", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000001000000000000000000000", "2", "4", null)]
        [NUnit.Framework.TestCaseAttribute("5000000000000000000000000000000000000000000000000P000000000000000000000", "2", "128", null)]
        [NUnit.Framework.TestCaseAttribute("5000000000000000000000000000000000000000000000000wh00000000000000000000", "2", "255", null)]
        [NUnit.Framework.TestCaseAttribute("53mFoV000000hf3C3S08`u8pH`Dhh0000000000m1@6334rdR0888888888888888888880", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("53mr4E42EBp00000001HU<Ttr0tJ1@PF0H`u8A<t00b5:40Ht3h00000000000000000000", "2", "15", null)]
        [NUnit.Framework.TestCaseAttribute("53JIbD42BlHOTP7;WSIHth622222222222222216D@L;B5n8NITSm51DQ0CH88888888880", "2", "102", null)]
        public virtual void Draught(string payload, string padding, string draught, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("draught", draught);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Draught", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 257
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 258
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as Static and Voyage Related Data", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 259
    testRunner.Then(string.Format("NmeaAisStaticAndVoyageRelatedDataParser.Draught10thMetres is {0}", draught), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Destination")]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000000", "2", "@@@@@@@@@@@@@@@@@@@@", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000<00000000000000000000", "2", "0@@@@@@@@@@@@@@@@@@@", null)]
        [NUnit.Framework.TestCaseAttribute("5000000000000000000000000000000000000000000000000000000000000000000000@", "2", "@@@@@@@@@@@@@@@@@@@A", null)]
        [NUnit.Framework.TestCaseAttribute("53mr4E42EBp00000001HU<Ttr0tJ1@PF0H`u8A<t00b5:40Ht3h00000000000000000000", "2", "@@@@@@@@@@@@@@@@@@@@", null)]
        [NUnit.Framework.TestCaseAttribute("53m89J81SR44hdhL0004eH5A84q<00000000001@4P8825LD08j0DTm0A00000000000000", "2", "HARSTAD@@@@@@@@@@@@@", null)]
        [NUnit.Framework.TestCaseAttribute("5SmkPJ02AmrLh=PV2208t60t@Tr222222222220l2@B785j:0BU4SkQ21BCH88888888880", "2", "TRONDHEIM", null)]
        [NUnit.Framework.TestCaseAttribute("53mFoV000000hf3C3S08`u8pH`Dhh0000000000m1@6334rdR0888888888888888888880", "2", "", null)]
        public virtual void Destination(string payload, string padding, string destination, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("destination", destination);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Destination", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 274
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 275
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as Static and Voyage Related Data", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 276
    testRunner.Then(string.Format("NmeaAisStaticAndVoyageRelatedDataParser.Destination is {0}", destination), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DTE ready")]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000000", "2", "false", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000008", "2", "true", null)]
        [NUnit.Framework.TestCaseAttribute("53m89J81SR44hdhL0004eH5A84q<00000000001@4P8825LD08j0DTm0A00000000000000", "2", "false", null)]
        [NUnit.Framework.TestCaseAttribute("53m:<F82FRLThI1:220puH60l5=@E:222222221J0`D460rdR8p88888888888888888888", "2", "true", null)]
        public virtual void DTEReady(string payload, string padding, string notReady, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("notReady", notReady);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DTE ready", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 288
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 289
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as Static and Voyage Related Data", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 290
    testRunner.Then(string.Format("NmeaAisStaticAndVoyageRelatedDataParser.DteNotReady is {0}", notReady), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Spare")]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000000", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("50000000000000000000000000000000000000000000000000000000000000000000004", "2", "1", null)]
        [NUnit.Framework.TestCaseAttribute("53m89J81SR44hdhL0004eH5A84q<00000000001@4P8825LD08j0DTm0A00000000000000", "2", "0", null)]
        [NUnit.Framework.TestCaseAttribute("5=7LHAT000000000000L58A<uT6085B3@000000U0@21140Ht000000000000000000000<", "2", "1", null)]
        public virtual void Spare(string payload, string padding, string spare, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("spare", spare);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Spare", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 299
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 300
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as Static and Voyage Related Data", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 301
    testRunner.Then(string.Format("NmeaAisStaticAndVoyageRelatedDataParser.Spare423 is {0}", spare), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
