// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Ais.Net.Specs.AisMessageTypes
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PositionReportClassBParserSpecs")]
    public partial class PositionReportClassBParserSpecsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PositionReportClassBParserSpecs.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Ais/Net/Specs/AisMessageTypes", "PositionReportClassBParserSpecs", "    In order process AIS messages from an nm4 file\r\n    As a developer\r\n    I wan" +
                    "t the NmeaAisPositionReportClassBParser to be able to parse the payload section " +
                    "of message type 18: Standard Class B CS Position Report", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Message Type")]
        public virtual void MessageType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Message Type", null, tagsOfScenario, argumentsOfScenario);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 16
    testRunner.When("I parse \'B3mR5u000HFQD;av`1arKwt5oP06\' with padding 0 as a Position Report Class " +
                        "B", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
    testRunner.Then("AisPositionReportClassBParser.Type is 18", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Repeat Indicator")]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("B@00000000000000000000000000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("BP00000000000000000000000000", "0", "2", null)]
        [NUnit.Framework.TestCaseAttribute("Bh00000000000000000000000000", "0", "3", null)]
        [NUnit.Framework.TestCaseAttribute("B3m?;p0008<q:naAtLh03wTUoP06", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("BCm?;p0008<q:naAtLh03wTUoP06", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("BSm?;p0008<q:naAtLh03wTUoP06", "0", "2", null)]
        [NUnit.Framework.TestCaseAttribute("Bkm?;p0008<q:naAtLh03wTUoP06", "0", "3", null)]
        public virtual void RepeatIndicator(string payload, string padding, string repeatCount, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("repeatCount", repeatCount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Repeat Indicator", null, tagsOfScenario, argumentsOfScenario);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 20
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
    testRunner.Then(string.Format("AisPositionReportClassBParser.RepeatIndicator is {0}", repeatCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("MMSI")]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("B00000@000000000000000000000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("B00000P000000000000000000000", "0", "2", null)]
        [NUnit.Framework.TestCaseAttribute("B>eq`d@000000000000000000000", "0", "987654321", null)]
        [NUnit.Framework.TestCaseAttribute("B3q35T005h<0h@`Dd:i;gwRUoP06", "0", "261146000", null)]
        [NUnit.Framework.TestCaseAttribute("B3m?;p0008<q:naAtLh03wTUoP06", "0", "257149920", null)]
        public virtual void MMSI(string payload, string padding, string mmsi, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("mmsi", mmsi);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("MMSI", null, tagsOfScenario, argumentsOfScenario);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
    testRunner.Then(string.Format("AisPositionReportClassBParser.Mmsi is {0}", mmsi), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Regional Reserved bits 38-45")]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("B000000400000000000000000000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("B000001000000000000000000000", "0", "16", null)]
        [NUnit.Framework.TestCaseAttribute("B00000?t00000000000000000000", "0", "255", null)]
        [NUnit.Framework.TestCaseAttribute("B3m?;p0008<q:naAtLh03wTUoP06", "0", "0", null)]
        public virtual void RegionalReservedBits38_45(string payload, string padding, string reserved, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("reserved", reserved);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Regional Reserved bits 38-45", null, tagsOfScenario, argumentsOfScenario);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 48
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 49
    testRunner.Then(string.Format("AisPositionReportClassBParser.RegionalReserved38 is {0}", reserved), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Speed Over Ground")]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("B00000000@000000000000000000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("B0000003wh000000000000000000", "0", "1023", null)]
        [NUnit.Framework.TestCaseAttribute("B3m?;p0008<q:naAtLh03wTUoP06", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("B3q35T005h<0h@`Dd:i;gwRUoP06", "0", "23", null)]
        public virtual void SpeedOverGround(string payload, string padding, string speedOverGround, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("speedOverGround", speedOverGround);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Speed Over Ground", null, tagsOfScenario, argumentsOfScenario);
#line 59
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 60
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 61
    testRunner.Then(string.Format("AisPositionReportClassBParser.SpeedOverGroundTenths is {0}", speedOverGround), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Position Accuracy")]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000000000", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("B000000008000000000000000000", "0", "true", null)]
        [NUnit.Framework.TestCaseAttribute("B3q35T005h<0h@`Dd:i;gwRUoP06", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("B3m?;p0008<q:naAtLh03wTUoP06", "0", "true", null)]
        public virtual void PositionAccuracy(string payload, string padding, string positionAccuracy, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("positionAccuracy", positionAccuracy);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Position Accuracy", null, tagsOfScenario, argumentsOfScenario);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 72
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 73
    testRunner.Then(string.Format("AisPositionReportClassBParser.PositionAccuracy is {0}", positionAccuracy), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Longitude and Latitude")]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000000000", "0", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("B0000000000000P0000000000000", "0", "1", "0", null)]
        [NUnit.Framework.TestCaseAttribute("B000000000000000004000000000", "0", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("B000000007wwwwP0000000000000", "0", "-1", "0", null)]
        [NUnit.Framework.TestCaseAttribute("B0000000000000Owwwt000000000", "0", "0", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("B3m6D@P0005r0R``WaiC;wgUkP06", "0", "3096645", "36216476", null)]
        public virtual void LongitudeAndLatitude(string payload, string padding, string longitude, string latitude, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("longitude", longitude);
            argumentsOfScenario.Add("latitude", latitude);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Longitude and Latitude", null, tagsOfScenario, argumentsOfScenario);
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 83
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
    testRunner.Then(string.Format("AisPositionReportClassBParser.Longitude10000thMins is {0}", longitude), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
    testRunner.Then(string.Format("AisPositionReportClassBParser.Latitude10000thMins is {0}", latitude), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Course Over Ground")]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000040000000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("B000000000000000003Pt0000000", "0", "3599", null)]
        [NUnit.Framework.TestCaseAttribute("B000000000000000003Q00000000", "0", "3600", null)]
        [NUnit.Framework.TestCaseAttribute("B3m?;p0008<q:naAtLh03wTUoP06", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("B3q35T005h<0h@`Dd:i;gwRUoP06", "0", "1211", null)]
        [NUnit.Framework.TestCaseAttribute("B3m6D@P0005r0R``WaiC;wgUkP06", "0", "1330", null)]
        [NUnit.Framework.TestCaseAttribute("B3mnUc0000@LTtaWw7CQ3wVTkP06", "0", "3600", null)]
        public virtual void CourseOverGround(string payload, string padding, string courseOverGround, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("courseOverGround", courseOverGround);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Course Over Ground", null, tagsOfScenario, argumentsOfScenario);
#line 96
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 97
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 98
    testRunner.Then(string.Format("AisPositionReportClassBParser.CourseOverGround10thDegrees is {0}", courseOverGround), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("True Heading")]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000P00000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("B00000000000000000003wP00000", "0", "511", null)]
        [NUnit.Framework.TestCaseAttribute("B3m:<b0008<B<s8TO0SQ2j11nDeJ", "0", "356", null)]
        [NUnit.Framework.TestCaseAttribute("B3q35T005h<0h@`Dd:i;gwRUoP06", "0", "511", null)]
        public virtual void TrueHeading(string payload, string padding, string trueHeading, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("trueHeading", trueHeading);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("True Heading", null, tagsOfScenario, argumentsOfScenario);
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 112
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 113
    testRunner.Then(string.Format("AisPositionReportClassBParser.TrueHeadingDegrees is {0}", trueHeading), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Time Stamp")]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("B0000000000000000000000P0000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000MP0000", "0", "59", null)]
        [NUnit.Framework.TestCaseAttribute("B3m:<b0008<B<s8TO0SQ2j11nDeJ", "0", "2", null)]
        [NUnit.Framework.TestCaseAttribute("B3m?;p0008<q:naAtLh03wTUoP06", "0", "9", null)]
        [NUnit.Framework.TestCaseAttribute("B3mnUc0000@LTtaWw7CQ3wVTkP06", "0", "13", null)]
        [NUnit.Framework.TestCaseAttribute("B3m6D@P0005r0R``WaiC;wgUkP06", "0", "31", null)]
        public virtual void TimeStamp(string payload, string padding, string timeStamp, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("timeStamp", timeStamp);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Time Stamp", null, tagsOfScenario, argumentsOfScenario);
#line 123
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 124
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 125
    testRunner.Then(string.Format("AisPositionReportClassBParser.TimeStampSecond is {0}", timeStamp), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Regional Reserved bits 139-140")]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000080000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("B0000000000000000000000@0000", "0", "2", null)]
        [NUnit.Framework.TestCaseAttribute("B0000000000000000000000H0000", "0", "3", null)]
        [NUnit.Framework.TestCaseAttribute("B3q35T005h<0h@`Dd:i;gwRUoP06", "0", "0", null)]
        public virtual void RegionalReservedBits139_140(string payload, string padding, string reserved, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("reserved", reserved);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Regional Reserved bits 139-140", null, tagsOfScenario, argumentsOfScenario);
#line 137
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 138
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 139
    testRunner.Then(string.Format("AisPositionReportClassBParser.RegionalReserved139 is {0}", reserved), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("CS unit flag")]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000000000", "0", "Sotdma", null)]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000040000", "0", "Cstdma", null)]
        [NUnit.Framework.TestCaseAttribute("B3m:<b0008<B<s8TO0SQ2j11nDeJ", "0", "Sotdma", null)]
        [NUnit.Framework.TestCaseAttribute("B3mnUc0000@LTtaWw7CQ3wVTkP06", "0", "Cstdma", null)]
        public virtual void CSUnitFlag(string payload, string padding, string unit, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("unit", unit);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CS unit flag", null, tagsOfScenario, argumentsOfScenario);
#line 149
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 150
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 151
    testRunner.Then(string.Format("AisPositionReportClassBParser.CsUnit is {0}", unit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Display flag")]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000000000", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000020000", "0", "true", null)]
        [NUnit.Framework.TestCaseAttribute("B3q35T005h<0h@`Dd:i;gwRUoP06", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("B5RVdt0000;I;08?A>MOKws7kP06", "0", "true", null)]
        public virtual void DisplayFlag(string payload, string padding, string hasDisplay, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("hasDisplay", hasDisplay);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Display flag", null, tagsOfScenario, argumentsOfScenario);
#line 160
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 161
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 162
    testRunner.Then(string.Format("AisPositionReportClassBParser.HasDisplay is {0}", hasDisplay), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DSC flag")]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000000000", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000010000", "0", "true", null)]
        [NUnit.Framework.TestCaseAttribute("B3mnUc0000@LTtaWw7CQ3wVTkP06", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("B3q35T005h<0h@`Dd:i;gwRUoP06", "0", "true", null)]
        public virtual void DSCFlag(string payload, string padding, string isDscAttached, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("isDscAttached", isDscAttached);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DSC flag", null, tagsOfScenario, argumentsOfScenario);
#line 171
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 172
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 173
    testRunner.Then(string.Format("AisPositionReportClassBParser.IsDscAttached is {0}", isDscAttached), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Band flag")]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000000000", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("B00000000000000000000000P000", "0", "true", null)]
        [NUnit.Framework.TestCaseAttribute("B3q35T005h<0h@`Dd:i;gwRUoP06", "0", "true", null)]
        public virtual void BandFlag(string payload, string padding, string canSwitchBands, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("canSwitchBands", canSwitchBands);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Band flag", null, tagsOfScenario, argumentsOfScenario);
#line 182
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 183
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 184
    testRunner.Then(string.Format("AisPositionReportClassBParser.CanSwitchBands is {0}", canSwitchBands), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Message 22 flag")]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000000000", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("B00000000000000000000000@000", "0", "true", null)]
        [NUnit.Framework.TestCaseAttribute("B3m>so00088pPR91r=JfOwV5WP06", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("B3q35T005h<0h@`Dd:i;gwRUoP06", "0", "true", null)]
        public virtual void Message22Flag(string payload, string padding, string canAcceptMessage22ChannelAssignment, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("canAcceptMessage22ChannelAssignment", canAcceptMessage22ChannelAssignment);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Message 22 flag", null, tagsOfScenario, argumentsOfScenario);
#line 192
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 193
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 194
    testRunner.Then(string.Format("AisPositionReportClassBParser.CanAcceptMessage22ChannelAssignment is {0}", canAcceptMessage22ChannelAssignment), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Assigned flag")]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000000000", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000008000", "0", "true", null)]
        [NUnit.Framework.TestCaseAttribute("B3q35T005h<0h@`Dd:i;gwRUoP06", "0", "false", null)]
        public virtual void AssignedFlag(string payload, string padding, string isAssigned, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("isAssigned", isAssigned);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assigned flag", null, tagsOfScenario, argumentsOfScenario);
#line 203
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 204
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 205
    testRunner.Then(string.Format("AisPositionReportClassBParser.IsAssigned is {0}", isAssigned), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("RAIM flag")]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000000000", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000004000", "0", "true", null)]
        [NUnit.Framework.TestCaseAttribute("B3m6D@P0005r0R``WaiC;wgUkP06", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("B3q35T005h<0h@`Dd:i;gwRUoP06", "0", "true", null)]
        public virtual void RAIMFlag(string payload, string padding, string raim, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("raim", raim);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RAIM flag", null, tagsOfScenario, argumentsOfScenario);
#line 213
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 214
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 215
    testRunner.Then(string.Format("AisPositionReportClassBParser.RaimFlag is {0}", raim), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Radio status type")]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000000000", "0", "Sotdma", null)]
        [NUnit.Framework.TestCaseAttribute("B000000000000000000000002000", "0", "Itdma", null)]
        [NUnit.Framework.TestCaseAttribute("B3q35T005h<0h@`Dd:i;gwRUoP06", "0", "Itdma", null)]
        public virtual void RadioStatusType(string payload, string padding, string radioStatusType, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("radioStatusType", radioStatusType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Radio status type", null, tagsOfScenario, argumentsOfScenario);
#line 224
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 225
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 226
    testRunner.Then(string.Format("AisPositionReportClassBParser.RadioStatusType is {0}", radioStatusType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
