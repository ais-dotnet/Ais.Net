// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.6.0.0
//      SpecFlow Generator Version:3.6.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Ais.Net.Specs.AisMessageTypes
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.6.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PositionReportClassAParserSpecs")]
    public partial class PositionReportClassAParserSpecsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PositionReportClassAParserSpecs.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Ais/Net/Specs/AisMessageTypes", "PositionReportClassAParserSpecs", "    In order process AIS messages from an nm4 file\r\n    As a developer\r\n    I wan" +
                    "t the NmeaAisPositionReportClassAParser to be able to parse the payload section " +
                    "of message types 1, 2 and 3: Position Report Class A", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Message Type")]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1Co`hD000`0unrRcusDEcTOL0P00", "0", "1", null)]
        public virtual void MessageType(string payload, string padding, string type, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("type", type);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Message Type", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 16
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class A", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 17
    testRunner.Then(string.Format("AisPositionReportClassAParser.Type is {0}", type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Repeat Indicator")]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1@00000000000000000000000000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1P00000000000000000000000000", "0", "2", null)]
        [NUnit.Framework.TestCaseAttribute("1h00000000000000000000000000", "0", "3", null)]
        [NUnit.Framework.TestCaseAttribute("13nW5<00000IoPlSbE`:P8EH0534", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1Co`hD000`0unrRcusDEcTOL0P00", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1Smbi200020cNi@TKh96@BEL0000", "0", "2", null)]
        [NUnit.Framework.TestCaseAttribute("1kmbi20P@10cNiLTKgi6Wld>0000", "0", "3", null)]
        public virtual void RepeatIndicator(string payload, string padding, string repeatCount, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("repeatCount", repeatCount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Repeat Indicator", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 25
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class A", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
    testRunner.Then(string.Format("AisPositionReportClassAParser.RepeatIndicator is {0}", repeatCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("MMSI")]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("100000@000000000000000000000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("100000P000000000000000000000", "0", "2", null)]
        [NUnit.Framework.TestCaseAttribute("1>eq`d@000000000000000000000", "0", "987654321", null)]
        [NUnit.Framework.TestCaseAttribute("13nW5<00000IoPlSbE`:P8EH0534", "0", "258590000", null)]
        [NUnit.Framework.TestCaseAttribute("24c`1`001kPEGSLR98IP00462D0s", "0", "314180000", null)]
        public virtual void MMSI(string payload, string padding, string mmsi, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("mmsi", mmsi);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("MMSI", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 40
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class A", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 41
    testRunner.Then(string.Format("AisPositionReportClassAParser.Mmsi is \'{0}\'", mmsi), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Navigation Status")]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000000", "0", "UnderwayUsingEngine", null)]
        [NUnit.Framework.TestCaseAttribute("1000001000000000000000000000", "0", "AtAnchor", null)]
        [NUnit.Framework.TestCaseAttribute("1000002000000000000000000000", "0", "NotUnderCommand", null)]
        [NUnit.Framework.TestCaseAttribute("1000003000000000000000000000", "0", "RestrictedManoeuverability", null)]
        [NUnit.Framework.TestCaseAttribute("1000004000000000000000000000", "0", "ConstrainedByHerDraught", null)]
        [NUnit.Framework.TestCaseAttribute("1000005000000000000000000000", "0", "Moored", null)]
        [NUnit.Framework.TestCaseAttribute("1000006000000000000000000000", "0", "Aground", null)]
        [NUnit.Framework.TestCaseAttribute("1000007000000000000000000000", "0", "EngagedInFishing", null)]
        [NUnit.Framework.TestCaseAttribute("1000008000000000000000000000", "0", "UnderWaySailing", null)]
        [NUnit.Framework.TestCaseAttribute("1000009000000000000000000000", "0", "ReservedForFutureAmendmentOfNavigationalStatusForHsc", null)]
        [NUnit.Framework.TestCaseAttribute("100000:000000000000000000000", "0", "ReservedForFutureAmendmentOfNavigationalStatusForWig", null)]
        [NUnit.Framework.TestCaseAttribute("100000;000000000000000000000", "0", "ReservedForFutureUse11", null)]
        [NUnit.Framework.TestCaseAttribute("100000<000000000000000000000", "0", "ReservedForFutureUse12", null)]
        [NUnit.Framework.TestCaseAttribute("100000=000000000000000000000", "0", "ReservedForFutureUse13", null)]
        [NUnit.Framework.TestCaseAttribute("100000>000000000000000000000", "0", "AisSartIsActive", null)]
        [NUnit.Framework.TestCaseAttribute("100000?000000000000000000000", "0", "NotDefined", null)]
        [NUnit.Framework.TestCaseAttribute("13nW5<00000IoPlSbE`:P8EH0534", "0", "UnderwayUsingEngine", null)]
        [NUnit.Framework.TestCaseAttribute("13@oSF101;PTR`fPLn2:U8S`0534", "0", "AtAnchor", null)]
        [NUnit.Framework.TestCaseAttribute("13mVWJ2P01P`jBlTMPsN4?v22<0G", "0", "NotUnderCommand", null)]
        [NUnit.Framework.TestCaseAttribute("13oFwV3P?w<tSF0l4Q@>4?wv0PSu", "0", "RestrictedManoeuverability", null)]
        [NUnit.Framework.TestCaseAttribute("15CIo>401f0jO4hQ0KN<F9n:0D<P", "0", "ConstrainedByHerDraught", null)]
        [NUnit.Framework.TestCaseAttribute("13n53M50001P2jv`4iFe@rJ<0000", "0", "Moored", null)]
        [NUnit.Framework.TestCaseAttribute("13mTRV701F23hFp`VlU4ul><0<0;", "0", "EngagedInFishing", null)]
        [NUnit.Framework.TestCaseAttribute("13B6BP80000jt=tPk:Isf:F@0538", "0", "UnderWaySailing", null)]
        [NUnit.Framework.TestCaseAttribute("13m`0o9P4hPTEKLQ>f<:ROvb0003", "0", "ReservedForFutureAmendmentOfNavigationalStatusForHsc", null)]
        [NUnit.Framework.TestCaseAttribute("13mClB:Oi<Pi:U4U5n?J;8CD00Rq", "0", "ReservedForFutureAmendmentOfNavigationalStatusForWig", null)]
        [NUnit.Framework.TestCaseAttribute("13m6;7cP020HJ`JRs9l0A?v`08<9", "0", "ReservedForFutureUse11", null)]
        [NUnit.Framework.TestCaseAttribute("13m9`rdw01QAv`<WiMAbF3ap2H1a", "0", "ReservedForFutureUse12", null)]
        [NUnit.Framework.TestCaseAttribute("13P=N7M1@10Ph14SqI7pAW@j0L0G", "0", "ReservedForFutureUse13", null)]
        [NUnit.Framework.TestCaseAttribute("13@njcg000PeVI>Pu9Hnul9D0D1M", "0", "NotDefined", null)]
        public virtual void NavigationStatus(string payload, string padding, string navigationStatus, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("navigationStatus", navigationStatus);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Navigation Status", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 53
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class A", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 54
    testRunner.Then(string.Format("AisPositionReportClassAParser.NavigationStatus is {0}", navigationStatus), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Rate of Turn")]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1000000wh0000000000000000000", "0", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("1000000Oh0000000000000000000", "0", "127", null)]
        [NUnit.Framework.TestCaseAttribute("1000000P00000000000000000000", "0", "-128", null)]
        [NUnit.Framework.TestCaseAttribute("13nW5<00000IoPlSbE`:P8EH0534", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("13oHtV7OhN0=B9bQch;WqnCp0W3h", "0", "127", null)]
        [NUnit.Framework.TestCaseAttribute("13mCIp0P00PFnJBSHS1>4?wH2@JB", "0", "-128", null)]
        [NUnit.Framework.TestCaseAttribute("13P=N7M1@10Ph14SqI7pAW@j0L0G", "0", "5", null)]
        public virtual void RateOfTurn(string payload, string padding, string rateOfTurn, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("rateOfTurn", rateOfTurn);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Rate of Turn", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 90
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class A", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 91
    testRunner.Then(string.Format("AisPositionReportClassAParser.RateOfTurn is {0}", rateOfTurn), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Speed Over Ground")]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1000000001000000000000000000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("10000000?w000000000000000000", "0", "1023", null)]
        [NUnit.Framework.TestCaseAttribute("13nW5<00000IoPlSbE`:P8EH0534", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1kmbi20P@10cNiLTKgi6Wld>0000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("13@oSF101;PTR`fPLn2:U8S`0534", "0", "75", null)]
        [NUnit.Framework.TestCaseAttribute("13m`0o9P4hPTEKLQ>f<:ROvb0003", "0", "304", null)]
        [NUnit.Framework.TestCaseAttribute("13oFwV3P?w<tSF0l4Q@>4?wv0PSu", "0", "1023", null)]
        public virtual void SpeedOverGround(string payload, string padding, string speedOverGround, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("speedOverGround", speedOverGround);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Speed Over Ground", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 104
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 105
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class A", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 106
    testRunner.Then(string.Format("AisPositionReportClassAParser.SpeedOverGroundTenths is {0}", speedOverGround), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Position Accuracy")]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000000", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000P00000000000000000", "0", "true", null)]
        [NUnit.Framework.TestCaseAttribute("13nW5<00000IoPlSbE`:P8EH0534", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("13@oSF101;PTR`fPLn2:U8S`0534", "0", "true", null)]
        public virtual void PositionAccuracy(string payload, string padding, string positionAccuracy, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("positionAccuracy", positionAccuracy);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Position Accuracy", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 119
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 120
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class A", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 121
    testRunner.Then(string.Format("AisPositionReportClassAParser.PositionAccuracy is {0}", positionAccuracy), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Longitude and Latitute")]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000000", "0", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000020000000000000", "0", "1", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000@00000000", "0", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000Owwwv0000000000000", "0", "-1", "0", null)]
        [NUnit.Framework.TestCaseAttribute("100000000000001wwwwh00000000", "0", "0", "-1", null)]
        [NUnit.Framework.TestCaseAttribute("13nW5<00000IoPlSbE`:P8EH0534", "0", "3390490", "37393824", null)]
        [NUnit.Framework.TestCaseAttribute("1Co`hD000`0unrRcusDEcTOL0P00", "0", "8107857", "46103377", null)]
        [NUnit.Framework.TestCaseAttribute("1Smbi200020cNi@TKh96@BEL0000", "0", "5699112", "38203428", null)]
        [NUnit.Framework.TestCaseAttribute("13oFwV3P?w<tSF0l4Q@>4?wv0PSu", "0", "108600000", "54600000", null)]
        public virtual void LongitudeAndLatitute(string payload, string padding, string longitude, string latitude, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("longitude", longitude);
            argumentsOfScenario.Add("latitude", latitude);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Longitude and Latitute", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 130
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 131
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class A", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 132
    testRunner.Then(string.Format("AisPositionReportClassAParser.Longitude10000thMins is {0}", longitude), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 133
    testRunner.Then(string.Format("AisPositionReportClassAParser.Latitude10000thMins is {0}", latitude), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Course Over Ground")]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("100000000000000000000@000000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000>40000000", "0", "3600", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000?wh000000", "0", "4095", null)]
        [NUnit.Framework.TestCaseAttribute("13mSjt7P001KOu6`6:3@0?wJ0<03", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("13m6;7cP020HJ`JRs9l0A?v`08<9", "0", "68", null)]
        [NUnit.Framework.TestCaseAttribute("1Smbi200020cNi@TKh96@BEL0000", "0", "1601", null)]
        [NUnit.Framework.TestCaseAttribute("13oO7800000FH>>S6rpur`P200S<", "0", "3562", null)]
        [NUnit.Framework.TestCaseAttribute("13mVWJ2P01P`jBlTMPsN4?v22<0G", "0", "3600", null)]
        public virtual void CourseOverGround(string payload, string padding, string courseOverGround, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("courseOverGround", courseOverGround);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Course Over Ground", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 147
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 148
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class A", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 149
    testRunner.Then(string.Format("AisPositionReportClassAParser.CourseOverGround10thDegrees is {0}", courseOverGround), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("True Heading")]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000200000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000v00000", "0", "31", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000001000000", "0", "32", null)]
        [NUnit.Framework.TestCaseAttribute("100000000000000000000?v00000", "0", "511", null)]
        [NUnit.Framework.TestCaseAttribute("1Smbi200020cNi@TKh96@BEL0000", "0", "74", null)]
        [NUnit.Framework.TestCaseAttribute("13B6BP80000jt=tPk:Isf:F@0538", "0", "331", null)]
        [NUnit.Framework.TestCaseAttribute("13mCIp0P00PFnJBSHS1>4?wH2@JB", "0", "511", null)]
        public virtual void TrueHeading(string payload, string padding, string trueHeading, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("trueHeading", trueHeading);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("True Heading", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 163
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 164
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class A", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 165
    testRunner.Then(string.Format("AisPositionReportClassAParser.TrueHeadingDegrees is {0}", trueHeading), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Time Stamp")]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000020000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("10000000000000000000001n0000", "0", "59", null)]
        [NUnit.Framework.TestCaseAttribute("10000000000000000000001p0000", "0", "60", null)]
        [NUnit.Framework.TestCaseAttribute("10000000000000000000001v0000", "0", "63", null)]
        [NUnit.Framework.TestCaseAttribute("13oO7800000FH>>S6rpur`P200S<", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("13nW5<00000IoPlSbE`:P8EH0534", "0", "44", null)]
        [NUnit.Framework.TestCaseAttribute("13oHtV7OhN0=B9bQch;WqnCp0W3h", "0", "60", null)]
        [NUnit.Framework.TestCaseAttribute("13oFwV3P?w<tSF0l4Q@>4?wv0PSu", "0", "63", null)]
        public virtual void TimeStamp(string payload, string padding, string timeStamp, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("timeStamp", timeStamp);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Time Stamp", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 178
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 179
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class A", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 180
    testRunner.Then(string.Format("AisPositionReportClassAParser.TimeStampSecond is {0}", timeStamp), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Manoeuvre Indicator")]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000000", "0", "NotAvailable", null)]
        [NUnit.Framework.TestCaseAttribute("100000000000000000000000P000", "0", "NoSpecialManoeuvre", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000010000", "0", "SpecialManoeuvre", null)]
        [NUnit.Framework.TestCaseAttribute("100000000000000000000001P000", "0", "NotDefinedBySpec", null)]
        [NUnit.Framework.TestCaseAttribute("13nW5<00000IoPlSbE`:P8EH0534", "0", "NotAvailable", null)]
        [NUnit.Framework.TestCaseAttribute("13n@kJ0000PIk0@Sc2==PDQd`53L", "0", "NoSpecialManoeuvre", null)]
        [NUnit.Framework.TestCaseAttribute("13m69r00AfPlnG6U;43aD7MO0534", "0", "SpecialManoeuvre", null)]
        public virtual void ManoeuvreIndicator(string payload, string padding, string manoeuvre, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("manoeuvre", manoeuvre);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Manoeuvre Indicator", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 194
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 195
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class A", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 196
    testRunner.Then(string.Format("AisPositionReportClassAParser.ManoeuvreIndicator is {0}", manoeuvre), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Spare Bits at 145")]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000004000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000008000", "0", "2", null)]
        [NUnit.Framework.TestCaseAttribute("100000000000000000000000<000", "0", "3", null)]
        [NUnit.Framework.TestCaseAttribute("100000000000000000000000@000", "0", "4", null)]
        [NUnit.Framework.TestCaseAttribute("100000000000000000000000D000", "0", "5", null)]
        [NUnit.Framework.TestCaseAttribute("100000000000000000000000H000", "0", "6", null)]
        [NUnit.Framework.TestCaseAttribute("100000000000000000000000L000", "0", "7", null)]
        [NUnit.Framework.TestCaseAttribute("13nW5<00000IoPlSbE`:P8EH0534", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("13n@kJ0000PIk0@Sc2==PDQd`53L", "0", "2", null)]
        public virtual void SpareBitsAt145(string payload, string padding, string spare, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("spare", spare);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Spare Bits at 145", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 208
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 209
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class A", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 210
    testRunner.Then(string.Format("AisPositionReportClassAParser.SpareBits145 is {0}", spare), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Raim Flag")]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000000", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000002000", "0", "true", null)]
        [NUnit.Framework.TestCaseAttribute("13nW5<00000IoPlSbE`:P8EH0534", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("13oHtV7OhN0=B9bQch;WqnCp0W3h", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("13mCIp0P00PFnJBSHS1>4?wH2@JB", "0", "true", null)]
        public virtual void RaimFlag(string payload, string padding, string flag, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("flag", flag);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Raim Flag", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 225
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 226
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class A", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 227
    testRunner.Then(string.Format("AisPositionReportClassAParser.RaimFlag is {0}", flag), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Radio Sync State")]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000000", "0", "UtcDirect", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000P00", "0", "UtcIndirect", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000001000", "0", "ToBaseStation", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000001P00", "0", "ToOtherStation", null)]
        [NUnit.Framework.TestCaseAttribute("1Smbi200020cNi@TKh96@BEL0000", "0", "UtcDirect", null)]
        [NUnit.Framework.TestCaseAttribute("1Co`hD000`0unrRcusDEcTOL0P00", "0", "UtcIndirect", null)]
        [NUnit.Framework.TestCaseAttribute("13oaO<5000PG1VhS?rC3ajf>1000", "0", "ToBaseStation", null)]
        public virtual void RadioSyncState(string payload, string padding, string state, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("state", state);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Radio Sync State", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 237
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 238
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class A", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 239
    testRunner.Then(string.Format("AisPositionReportClassAParser.RadioSyncState is {0}", state), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Radio Slot Timeout")]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000400", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000800", "0", "2", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000<00", "0", "3", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000@00", "0", "4", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000D00", "0", "5", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000H00", "0", "6", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000L00", "0", "7", null)]
        [NUnit.Framework.TestCaseAttribute("13oFwV3P?w<tSF0l4Q@>4?wv0PSu", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("13@oSF101;PTR`fPLn2:U8S`0534", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("13m6;7cP020HJ`JRs9l0A?v`08<9", "0", "2", null)]
        [NUnit.Framework.TestCaseAttribute("13mTRV701F23hFp`VlU4ul><0<0;", "0", "3", null)]
        [NUnit.Framework.TestCaseAttribute("13`j@B001h0lICBPg476:TlB0@5:", "0", "4", null)]
        [NUnit.Framework.TestCaseAttribute("13@njcg000PeVI>Pu9Hnul9D0D1M", "0", "5", null)]
        [NUnit.Framework.TestCaseAttribute("13m9`rdw01QAv`<WiMAbF3ap2H1a", "0", "6", null)]
        [NUnit.Framework.TestCaseAttribute("13P=N7M1@10Ph14SqI7pAW@j0L0G", "0", "7", null)]
        public virtual void RadioSlotTimeout(string payload, string padding, string timeout, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("timeout", timeout);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Radio Slot Timeout", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 251
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 252
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class A", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 253
    testRunner.Then(string.Format("AisPositionReportClassAParser.RadioSlotTimeout is {0}", timeout), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Radio Sub Message")]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("1000000000000000000000000200", "0", "8192", null)]
        [NUnit.Framework.TestCaseAttribute("10000000000000000000000003ww", "0", "16383", null)]
        [NUnit.Framework.TestCaseAttribute("13mClB:Oi<Pi:U4U5n?J;8CD00Rq", "0", "2233", null)]
        public virtual void RadioSubMessage(string payload, string padding, string message, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Radio Sub Message", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 274
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 275
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Class A", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 276
    testRunner.Then(string.Format("AisPositionReportClassAParser.RadioSubMessage is {0}", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
