// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Ais.Net.Specs.AisMessageTypes
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("PositionReportExtendedClassBParserSpecs")]
    public partial class PositionReportExtendedClassBParserSpecsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PositionReportExtendedClassBParserSpecs.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Ais/Net/Specs/AisMessageTypes", "PositionReportExtendedClassBParserSpecs", "    In order process AIS messages from an nm4 file\r\n    As a developer\r\n    I wan" +
                    "t the NmeaAisPositionReportExtendedClassBParser to be able to parse the payload " +
                    "section of message type 19: Extended Class B CS Position Report", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Message Type")]
        public virtual void MessageType()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Message Type", null, tagsOfScenario, argumentsOfScenario);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
    testRunner.When("I parse \'C>eq`d@000000000000000000000000000000000000000000000\' with padding 0 as " +
                        "a Position Report Extended Class B", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 10
    testRunner.Then("NmeaAisPositionReportExtendedClassBParser.Type is 19", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Repeat Indicator")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("C@00000000000000000000000000000000000000000000000000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("CP00000000000000000000000000000000000000000000000000", "0", "2", null)]
        [NUnit.Framework.TestCaseAttribute("Ch00000000000000000000000000000000000000000000000000", "0", "3", null)]
        public virtual void RepeatIndicator(string payload, string padding, string repeatCount, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("repeatCount", repeatCount);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Repeat Indicator", null, tagsOfScenario, argumentsOfScenario);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 13
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 14
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.RepeatIndicator is {0}", repeatCount), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("MMSI")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("C00000@000000000000000000000000000000000000000000000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("C00000P000000000000000000000000000000000000000000000", "0", "2", null)]
        [NUnit.Framework.TestCaseAttribute("C>eq`d@000000000000000000000000000000000000000000000", "0", "987654321", null)]
        public virtual void MMSI(string payload, string padding, string mmsi, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("mmsi", mmsi);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("MMSI", null, tagsOfScenario, argumentsOfScenario);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 24
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.Mmsi is {0}", mmsi), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Regional Reserved bits 38-45")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("C000000400000000000000000000000000000000000000000000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("C000001000000000000000000000000000000000000000000000", "0", "16", null)]
        [NUnit.Framework.TestCaseAttribute("C00000?t00000000000000000000000000000000000000000000", "0", "255", null)]
        public virtual void RegionalReservedBits38_45(string payload, string padding, string reserved, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("reserved", reserved);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Regional Reserved bits 38-45", null, tagsOfScenario, argumentsOfScenario);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 35
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.RegionalReserved38 is {0}", reserved), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Speed Over Ground")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("C00000000@000000000000000000000000000000000000000000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("C0000003wh000000000000000000000000000000000000000000", "0", "1023", null)]
        public virtual void SpeedOverGround(string payload, string padding, string speedOverGround, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("speedOverGround", speedOverGround);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Speed Over Ground", null, tagsOfScenario, argumentsOfScenario);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 46
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 47
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.SpeedOverGroundTenths is {0}", speedOverGround), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Position Accuracy")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("C000000008000000000000000000000000000000000000000000", "0", "true", null)]
        public virtual void PositionAccuracy(string payload, string padding, string positionAccuracy, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("positionAccuracy", positionAccuracy);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Position Accuracy", null, tagsOfScenario, argumentsOfScenario);
#line 55
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 56
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 57
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.PositionAccuracy is {0}", positionAccuracy), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Longitude and Latitute")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("C0000000000000P0000000000000000000000000000000000000", "0", "1", "0", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000004000000000000000000000000000000000", "0", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("C000000007wwwwP0000000000000000000000000000000000000", "0", "-1", "0", null)]
        [NUnit.Framework.TestCaseAttribute("C0000000000000Owwwt000000000000000000000000000000000", "0", "0", "-1", null)]
        public virtual void LongitudeAndLatitute(string payload, string padding, string longitude, string latitude, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("longitude", longitude);
            argumentsOfScenario.Add("latitude", latitude);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Longitude and Latitute", null, tagsOfScenario, argumentsOfScenario);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 65
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.Longitude10000thMins is {0}", longitude), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 67
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.Latitude10000thMins is {0}", latitude), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Course Over Ground")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000040000000000000000000000000000000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000003Pt0000000000000000000000000000000", "0", "3599", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000003Q00000000000000000000000000000000", "0", "3600", null)]
        public virtual void CourseOverGround(string payload, string padding, string courseOverGround, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("courseOverGround", courseOverGround);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Course Over Ground", null, tagsOfScenario, argumentsOfScenario);
#line 77
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 78
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 79
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.CourseOverGround10thDegrees is {0}", courseOverGround), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("True Heading")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000P00000000000000000000000000000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("C00000000000000000003wP00000000000000000000000000000", "0", "511", null)]
        public virtual void TrueHeading(string payload, string padding, string trueHeading, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("trueHeading", trueHeading);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("True Heading", null, tagsOfScenario, argumentsOfScenario);
#line 88
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 89
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 90
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.TrueHeadingDegrees is {0}", trueHeading), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Time Stamp")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("C0000000000000000000000P0000000000000000000000000000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000MP0000000000000000000000000000", "0", "59", null)]
        public virtual void TimeStamp(string payload, string padding, string timeStamp, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("timeStamp", timeStamp);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Time Stamp", null, tagsOfScenario, argumentsOfScenario);
#line 98
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 99
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 100
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.TimeStampSecond is {0}", timeStamp), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Regional Reserved bits 139-142")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000020000000000000000000000000000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000040000000000000000000000000000", "0", "2", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000080000000000000000000000000000", "0", "4", null)]
        [NUnit.Framework.TestCaseAttribute("C0000000000000000000000@0000000000000000000000000000", "0", "8", null)]
        [NUnit.Framework.TestCaseAttribute("C0000000000000000000000H0000000000000000000000000000", "0", "12", null)]
        [NUnit.Framework.TestCaseAttribute("C0000000000000000000000N0000000000000000000000000000", "0", "15", null)]
        public virtual void RegionalReservedBits139_142(string payload, string padding, string reserved, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("reserved", reserved);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Regional Reserved bits 139-142", null, tagsOfScenario, argumentsOfScenario);
#line 108
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 109
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 110
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.RegionalReserved139 is {0}", reserved), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Name")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "@@@@@@@@@@@@@@@@@@@@", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000002000000000000000000000000000", "0", "A@@@@@@@@@@@@@@@@@@@", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000002468:<>@BDFHJLNPRTV`00000000", "0", "ABCDEFGHIJKLMNOPQRST", null)]
        [NUnit.Framework.TestCaseAttribute("C00000000000000000000000bdfhjlnprtw13579;=?A00000000", "0", "UVWXYZ[\\]^_ !\"#$%&\'(", null)]
        [NUnit.Framework.TestCaseAttribute("C00000000000000000000001CEGIKMOQSUWacegikmoq00000000", "0", ")*+,-./0123456789:;<", null)]
        [NUnit.Framework.TestCaseAttribute("C00000000000000000000001suv0000000000000000000000000", "0", "=>?@@@@@@@@@@@@@@@@@", null)]
        public virtual void Name(string payload, string padding, string name, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("name", name);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Name", null, tagsOfScenario, argumentsOfScenario);
#line 122
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 123
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 124
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.Name is \'{0}\'", name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Ship type")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "NotAvailable", null)]
        [NUnit.Framework.TestCaseAttribute("C0000000000000000000000000000000000000000000:P000000", "0", "WingInGroundHazardousCategoryA", null)]
        public virtual void ShipType(string payload, string padding, string type, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("type", type);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ship type", null, tagsOfScenario, argumentsOfScenario);
#line 135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 136
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 137
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.ShipType is {0}", type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dimension to Bow")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000400000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("C00000000000000000000000000000000000000000000Ot00000", "0", "511", null)]
        public virtual void DimensionToBow(string payload, string padding, string size, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("size", size);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dimension to Bow", null, tagsOfScenario, argumentsOfScenario);
#line 144
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 145
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 146
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.DimensionToBow is {0}", size), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dimension to Stern")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("C00000000000000000000000000000000000000000000000P000", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("C0000000000000000000000000000000000000000000003wP000", "0", "511", null)]
        public virtual void DimensionToStern(string payload, string padding, string size, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("size", size);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dimension to Stern", null, tagsOfScenario, argumentsOfScenario);
#line 154
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 155
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 156
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.DimensionToStern is {0}", size), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dimension to Port")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000P00", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("C00000000000000000000000000000000000000000000000OP00", "0", "63", null)]
        public virtual void DimensionToPort(string payload, string padding, string size, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("size", size);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dimension to Port", null, tagsOfScenario, argumentsOfScenario);
#line 164
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 165
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 166
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.DimensionToPort is {0}", size), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Dimension to Starboard")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("C0000000000000000000000000000000000000000000000000P0", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000OP0", "0", "63", null)]
        public virtual void DimensionToStarboard(string payload, string padding, string size, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("size", size);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Dimension to Starboard", null, tagsOfScenario, argumentsOfScenario);
#line 174
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 175
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 176
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.DimensionToStarboard is {0}", size), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Position fix type")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "Undefined", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000020", "0", "Gps", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000040", "0", "Glonass", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000060", "0", "CombinedGpsGlonass", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000080", "0", "LoranC", null)]
        [NUnit.Framework.TestCaseAttribute("C0000000000000000000000000000000000000000000000000:0", "0", "Chayka", null)]
        [NUnit.Framework.TestCaseAttribute("C0000000000000000000000000000000000000000000000000<0", "0", "IntegratedNavigationSystem", null)]
        [NUnit.Framework.TestCaseAttribute("C0000000000000000000000000000000000000000000000000>0", "0", "Surveyed", null)]
        [NUnit.Framework.TestCaseAttribute("C0000000000000000000000000000000000000000000000000@0", "0", "Galileo", null)]
        public virtual void PositionFixType(string payload, string padding, string epfd, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("epfd", epfd);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Position fix type", null, tagsOfScenario, argumentsOfScenario);
#line 184
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 185
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 186
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.PositionFixType is {0}", epfd), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("RAIM flag")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000010", "0", "true", null)]
        public virtual void RAIMFlag(string payload, string padding, string raim, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("raim", raim);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("RAIM flag", null, tagsOfScenario, argumentsOfScenario);
#line 200
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 201
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 202
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.RaimFlag is {0}", raim), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("DTE ready")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("C00000000000000000000000000000000000000000000000000P", "0", "true", null)]
        public virtual void DTEReady(string payload, string padding, string notReady, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("notReady", notReady);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DTE ready", null, tagsOfScenario, argumentsOfScenario);
#line 209
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 210
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 211
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.DteNotReady is {0}", notReady), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Assigned flag")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "false", null)]
        [NUnit.Framework.TestCaseAttribute("C00000000000000000000000000000000000000000000000000@", "0", "true", null)]
        public virtual void AssignedFlag(string payload, string padding, string isAssigned, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("isAssigned", isAssigned);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assigned flag", null, tagsOfScenario, argumentsOfScenario);
#line 218
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 219
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 220
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.IsAssigned is {0}", isAssigned), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Spare")]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000000", "0", "0", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000001", "0", "1", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000002", "0", "2", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000007", "0", "7", null)]
        [NUnit.Framework.TestCaseAttribute("C000000000000000000000000000000000000000000000000008", "0", "8", null)]
        [NUnit.Framework.TestCaseAttribute("C00000000000000000000000000000000000000000000000000>", "0", "14", null)]
        [NUnit.Framework.TestCaseAttribute("C00000000000000000000000000000000000000000000000000?", "0", "15", null)]
        public virtual void Spare(string payload, string padding, string spare, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("payload", payload);
            argumentsOfScenario.Add("padding", padding);
            argumentsOfScenario.Add("spare", spare);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Spare", null, tagsOfScenario, argumentsOfScenario);
#line 227
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 228
    testRunner.When(string.Format("I parse \'{0}\' with padding {1} as a Position Report Extended Class B", payload, padding), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 229
    testRunner.Then(string.Format("NmeaAisPositionReportExtendedClassBParser.Spare308 is {0}", spare), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
